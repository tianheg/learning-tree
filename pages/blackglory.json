{
  "props": {
    "pageProps": {
      "document": {
        "metadata": {
          "title": "TypeScript",
          "slug": "typescript",
          "visibility": true,
          "stage": "🌳"
        },
        "mainBody": {
          "type": "romast",
          "ast": {
            "type": "document",
            "children": [
              {
                "type": "section",
                "level": 1,
                "headline": {
                  "type": "headline",
                  "children": [
                    {
                      "type": "text",
                      "value": "TypeScript(v4.9)"
                    }
                  ],
                  "tags": []
                },
                "children": [
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "缺陷"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "高阶类型缺乏可读性"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "当前编写高阶类型时, 语法过于牵强, 比如用extends实现条件语句."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "理应有像"
                              },
                              {
                                "type": "link",
                                "protocol": "internal",
                                "url": "typetype",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "typetype"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": "那样的, 更符合常识的编写方法."
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "无法实现negative类型检查"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "TypeScript当前只能允许特定类型, 而不能禁止特定类型."
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "无法跳过泛型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "https://github.com/microsoft/TypeScript/issues/10571"
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "由于缺少该特性, 导致一旦手动输入一个泛型, 其他原本能够自动检测的泛型都会失去自动检测能力:"
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "https://github.com/microsoft/TypeScript/issues/10571#issuecomment-940172215"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "无法声明构造函数的返回类型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "list",
                            "indent": 0,
                            "ordered": false,
                            "children": [
                              {
                                "type": "listItem",
                                "indent": 0,
                                "checked": null,
                                "term": null,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "https://github.com/microsoft/TypeScript/issues/27594"
                                  }
                                ]
                              },
                              {
                                "type": "listItem",
                                "indent": 0,
                                "checked": null,
                                "term": null,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "https://github.com/microsoft/TypeScript/issues/38519"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "无法正确处理泛型参数的衍生品"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "TypeScript无法正确处理泛型参数的衍生品的分支路径."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "举例来说, 已知泛型 "
                              },
                              {
                                "type": "verbatim",
                                "value": "Arr"
                              },
                              {
                                "type": "text",
                                "value": " 是一个数组, "
                              },
                              {
                                "type": "verbatim",
                                "value": "Arr[Index]"
                              },
                              {
                                "type": "text",
                                "value": " 是该数组的元素."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "在将 "
                              },
                              {
                                "type": "verbatim",
                                "value": "Arr[Index]"
                              },
                              {
                                "type": "text",
                                "value": " 用于条件语句时, "
                              },
                              {
                                "type": "verbatim",
                                "value": "Arr[Index]"
                              },
                              {
                                "type": "text",
                                "value": " 的类型推断实际上不能在后续流程中生效."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "解决此问题的一个小技巧是用 "
                              },
                              {
                                "type": "verbatim",
                                "value": "[T] extends [infer U]"
                              },
                              {
                                "type": "text",
                                "value": " 来通过条件语句声明新的泛型."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "由于新的变量不是泛型参数的衍生品, 而是泛型本身, 它就会被TypeScript正确处理."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "satisfies"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "TypeScript 4.9新增的运算符, 旨在于一些场景替代as运算符."
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "用例见"
                          },
                          {
                            "type": "link",
                            "protocol": "internal",
                            "url": "类型运算符对比",
                            "children": [
                              {
                                "type": "text",
                                "value": "类型运算符对比"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "与as运算符的区别"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "as运算符执行的类型转换运算允许向下兼容:"
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "只要左值能够赋值给右值类型, 转换就成立."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "举例来说, 如果右值是一个接口, 则左值可以包含任何超出该接口的成员."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "转换成立后, 返回右值类型."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "需要注意, as运算符的这种直接返回右值类型的行为是 "
                              },
                              {
                                "type": "bold",
                                "value": "非常危险"
                              },
                              {
                                "type": "text",
                                "value": " 的,"
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "因为一个 "
                              },
                              {
                                "type": "verbatim",
                                "value": "T | undefined"
                              },
                              {
                                "type": "text",
                                "value": " 值可以被错误地强制转换为 "
                              },
                              {
                                "type": "verbatim",
                                "value": "T"
                              },
                              {
                                "type": "text",
                                "value": "."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "而实际上我们想要当值是 "
                              },
                              {
                                "type": "verbatim",
                                "value": "T"
                              },
                              {
                                "type": "text",
                                "value": " 的时候返回 "
                              },
                              {
                                "type": "verbatim",
                                "value": "T"
                              },
                              {
                                "type": "text",
                                "value": ", 当值是 "
                              },
                              {
                                "type": "verbatim",
                                "value": "undefined"
                              },
                              {
                                "type": "text",
                                "value": " 时返回 "
                              },
                              {
                                "type": "verbatim",
                                "value": "undefined"
                              },
                              {
                                "type": "text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "satisfies运算符在类型转换运算时不允许向下兼容:"
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "bold",
                                "value": "左值必须严格符合右值的接口"
                              },
                              {
                                "type": "text",
                                "value": ", 否则转换不成立."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "举例来说, 如果右值是一个接口, 则左值必须不包含任何超出该接口的成员."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "转换成立后, "
                              },
                              {
                                "type": "bold",
                                "value": "返回的是满足右值类型的左值类型"
                              },
                              {
                                "type": "text",
                                "value": ", 这使类型转换变得更严谨, 从而避免出错."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "综上所述, 在很多场合下, satisfies运算符都可以替代as运算符."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "类似于any和unknown的关系, "
                              },
                              {
                                "type": "bold",
                                "value": "satisfies应该成为首选的运算符"
                              },
                              {
                                "type": "text",
                                "value": ", 仅在必要时使用as运算符."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "\u003c\u003c类型运算符对比\u003e\u003e"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "type Colors = 'red' | 'green' | 'blue'\ntype RGB = [red: number, green: number, blue: number]\n\n// 变量类型为\n// {\n//   red: number[]\n//   green: string\n//   blue: number[]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n}\n// 不符合 Record\u003cColors, string | RGB\u003e\n\n// 变量类型为\n// {\n//   readonly red: readonly [255, 0, 0]\n//   readonly green: '#00ff00'\n//   readonly blue: readonly [0, 0, 255]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} as const\n// 不符合 Record\u003cColors, string | RGB\u003e, 但由于结果包含readonly修饰符, 不能再修改了\n\n// 变量类型为\n// Record\u003cColors, string | RGB\u003e \nconst paletteA: Record\u003cColors, string | RGB\u003e = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n}\n// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失\n\n// 变量类型为\n// Record\u003cColors, string | RGB\u003e \nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} as Record\u003cColors, string | RGB\u003e\n// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失\n\n// 变量类型为\n// {\n//   red: [number, number, number]\n//   green: string\n//   blue: [number, number, number]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} satisfies Record\u003cColors, string | RGB\u003e\n// 符合 Record\u003cColors, string | RGB\u003e, 且red, green, blue的具体类型得到保留"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "枚举 enum"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "检查值是否是一个枚举值"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "数字枚举"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "example",
                                "params": [
                                  "typescript"
                                ],
                                "value": "enum Enum {\n  A = 0\n}\n\nconst val = 0\nconst result = val in Enum // true"
                              }
                            ]
                          },
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "字符串枚举"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "字符串枚举没有反向映射, 所以不能使用 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "in"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 运算符."
                                  }
                                ]
                              },
                              {
                                "type": "example",
                                "params": [
                                  "typescript"
                                ],
                                "value": "enum Enum {\n  A = 'a'\n}\n\nconst val = 'a'\nconst result = Object.values(Enum).includes(val) // true"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "从值获取枚举名"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "enum Enum {\n  A\n}\n\nconst a = Enum.A\nconst nameOfA = Enum[a] // 'A'"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "常量枚举 const enum"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "常量枚举在编译时会使用内联形式直接替换对应值, 因此与枚举相关的信息在编译后的代码里完全删除."
                              }
                            ]
                          },
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "const enum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n \nlet directions = [\n  Direction.Up,\n  Direction.Down,\n  Direction.Left,\n  Direction.Right,\n]\n\n// 编译后\nlet directions = [\n    0 /* Up */,\n    1 /* Down */,\n    2 /* Left */,\n    3 /* Right */,\n]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "类与接口弱类型检测"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "当一个类被创建的目的是为了实现一个只包含可选属性的接口时, 使用该类的实例可能会遇到错误:"
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "verbatim",
                            "value": "TS2559: Type 'X' has no properties in common with type 'Y'"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "这是因为类没有将接口声明的全部属性包括在类的定义里."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "有两种方法可以解决此错误:"
                          }
                        ]
                      },
                      {
                        "type": "list",
                        "indent": 0,
                        "ordered": false,
                        "children": [
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "将类的定义改成与接口相同(不推荐, 因为可能需要改动很多)."
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "将实例的类型强制转换为接口的类型, 可以用工厂函数方便实现此功能."
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "参考: https://stackoverflow.com/questions/46449237/type-x-has-no-properties-in-common-with-type-y"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "值得查看的社区库"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "list",
                        "indent": 0,
                        "ordered": false,
                        "children": [
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "ts-toolbelt: https://github.com/millsp/ts-toolbelt"
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "purify: https://github.com/gigobyte/purify"
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "\u003c\u003ctypetype\u003e\u003e: https://github.com/mistlog/typetype"
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "type-challenges: https://github.com/type-challenges/type-challenges"
                              }
                            ]
                          },
                          {
                            "type": "listItem",
                            "indent": 0,
                            "checked": null,
                            "term": null,
                            "children": [
                              {
                                "type": "text",
                                "value": "fp-ts: https://github.com/gcanti/fp-ts"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "type"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "作为接口的type"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "将type作为接口时和interface有一个重大区别: type创建的接口是不能扩展的."
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "作为别名的type"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "type不是一个单独的类型, 而是其代表的类型的别名."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "两个代表的类型相同的type是完全相等的, 无法以任何方式区别它们."
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "修改键名"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "从TypeScript 4.1开始, 支持直接修改映射类型的键名."
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "type Getters\u003cType\u003e = {\n  [Property in keyof Type as `get${Capitalize\u003cstring \u0026 Property\u003e}`]: () =\u003e Type[Property]\n}\n\ntype RemoveKindField\u003cType\u003e = {\n  [Property in keyof Type as Exclude\u003cProperty, 'kind'\u003e]: Type[Property]\n}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "object, Object, {}的区别"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "verbatim",
                            "value": "Object"
                          },
                          {
                            "type": "text",
                            "value": " 和 "
                          },
                          {
                            "type": "verbatim",
                            "value": "{}"
                          },
                          {
                            "type": "text",
                            "value": " 是相同的, 接受的值相当于 "
                          },
                          {
                            "type": "verbatim",
                            "value": "any"
                          },
                          {
                            "type": "text",
                            "value": "."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "verbatim",
                            "value": "object"
                          },
                          {
                            "type": "text",
                            "value": " 是在TypeScript 2.2中引入的, 指代指除primitive values以外的任何值."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "然而, "
                          },
                          {
                            "type": "verbatim",
                            "value": "object"
                          },
                          {
                            "type": "text",
                            "value": " 类型很难直接使用, 因为它没有property定义."
                          }
                        ]
                      },
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "在不开启strictNullChecks的情况下, 这三种类型都接受 "
                          },
                          {
                            "type": "verbatim",
                            "value": "undefined"
                          },
                          {
                            "type": "text",
                            "value": " 和 "
                          },
                          {
                            "type": "verbatim",
                            "value": "null"
                          },
                          {
                            "type": "text",
                            "value": " 值."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "为避免这三种类型接受 "
                          },
                          {
                            "type": "verbatim",
                            "value": "undefined"
                          },
                          {
                            "type": "text",
                            "value": " 或 "
                          },
                          {
                            "type": "verbatim",
                            "value": "null"
                          },
                          {
                            "type": "text",
                            "value": ", "
                          },
                          {
                            "type": "bold",
                            "value": "一定要开启strictNullChecks选项"
                          },
                          {
                            "type": "text",
                            "value": "."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "void与undefined的区别"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "当用于函数的返回类型时,"
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "verbatim",
                            "value": "void"
                          },
                          {
                            "type": "text",
                            "value": " 表示忽略函数的返回类型, "
                          },
                          {
                            "type": "verbatim",
                            "value": "undefined"
                          },
                          {
                            "type": "text",
                            "value": " 则指定函数返回 "
                          },
                          {
                            "type": "verbatim",
                            "value": "undefined"
                          },
                          {
                            "type": "text",
                            "value": " 类型."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "bold",
                            "value": "以 =void= 为返回类型的函数签名可以兼容具有任何返回值的函数."
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "type A = () =\u003e void\ntype B = () =\u003e undefined\n\nconst a: A = () =\u003e true // ok\nconst b: B = () =\u003e true // oops!"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "unknown与any的区别"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "verbatim",
                            "value": "unknown"
                          },
                          {
                            "type": "text",
                            "value": " 被认为是类型安全版本的 "
                          },
                          {
                            "type": "verbatim",
                            "value": "any"
                          },
                          {
                            "type": "text",
                            "value": "."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "verbatim",
                            "value": "unknown"
                          },
                          {
                            "type": "text",
                            "value": " 在静态检查时会报错, 而 "
                          },
                          {
                            "type": "verbatim",
                            "value": "any"
                          },
                          {
                            "type": "text",
                            "value": " 会忽略一切错误."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "函数签名"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "定义函数签名时, 可以额外设置prop, 只需要让它看起来像个接口."
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "// 类型形式\ntype DescribableFunction = {\n  (someArg: number): boolean\n  description: string\n}\n\n// 接口形式\ninterface DescribableFunction {\n  (someArg: number): boolean\n  description: string\n}"
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "构造函数签名"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "// 类型形式\ntype SomeConstructor = {\n  new (someArg: string): SomeObject\n}\n\n// 接口形式\ninterface SomeConstructor {\n  new (someArg: string): SomeObject\n}\n\n// 同时作为一般函数和构造函数\ninterface CallOrConstruct {\n  new (s: string): Date\n  (n?: number): number\n}"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "将函数签名作为约束"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "将函数签名作为约束的关键在于如果args是任意的,"
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "则类型需要是 "
                              },
                              {
                                "type": "verbatim",
                                "value": "any"
                              },
                              {
                                "type": "text",
                                "value": " 或 "
                              },
                              {
                                "type": "verbatim",
                                "value": "any[]"
                              },
                              {
                                "type": "text",
                                "value": ", 不能是 "
                              },
                              {
                                "type": "verbatim",
                                "value": "unknown"
                              },
                              {
                                "type": "text",
                                "value": " 或 "
                              },
                              {
                                "type": "verbatim",
                                "value": "unknown[]"
                              },
                              {
                                "type": "text",
                                "value": "."
                              }
                            ]
                          },
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "T extends (...args: any) =\u003e any"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "\u0026 求交集(Intersection)"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "很容易将 "
                          },
                          {
                            "type": "verbatim",
                            "value": "\u0026"
                          },
                          {
                            "type": "text",
                            "value": " 误解为混入(mixin), 这是因为当两个接口的成员不重叠时, 其行为是符合开发人员预期的."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "但如果两个接口的成员有重叠, 则会返回一个无法使用的接口(即带有never的接口), 这与混入有很大的差异."
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "// 不同的类型\ntype Foo = string\ntype Bar = number\ntype Result = Foo \u0026 Bar // never\n\n// 有重叠的union类型\ntype Foo = string | boolean\ntype Bar = number | boolean\ntype Result = Foo \u0026 Bar // boolean\n\n// 有重叠的接口\ninterface Foo {\n  prop: string\n  a: string\n}\ninterface Bar {\n  prop: number\n  b: string\n}\ntype Result = Foo \u0026 Bar // { a: string; b: string; prop: never }\n// 当接口里存在值类型为never的必要字段时, 该接口无法使用, 因此不应该在有重叠的接口上使用\u0026.\n\n// 可选与必需成员重叠的接口\ninterface Foo {\n  prop?: string\n}\ninterface Bar {\n  prop: string\n}\ntype Result = Foo \u0026 Bar // { prop: string }\ntype Result = Bar \u0026 Foo // 该运算符合交换律, 即使调换顺序也会得到 { prop: string }\n\n// 不重叠的接口\ninterface Foo {\n  a: string\n}\ninterface Bar {\n  b: number\n}\ntype Result = Foo \u0026 Bar // { a: string; b: number }"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "| 求并集(Union)"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "// 不同的类型\ntype Foo = string\ntype Bar = number\ntype Result = Foo | Bar // string | number\n\n// 有重叠的union类型\ntype Foo = string | boolean\ntype Bar = number | boolean\ntype Result = Foo | Bar // string | number | boolean\n\n// 有重叠的接口\ninterface Foo {\n  prop: string\n  a: string\n}\ninterface Bar {\n  prop: number\n  b: number\n}\ntype Result = Foo | Bar\n// | { prop: string; a: string }\n// | { prop: number; b: number }\n// | { prop: string | number; a: string; b: number }\n\n// 可选与必需成员重叠的接口\ninterface Foo {\n  prop?: string\n}\ninterface Bar {\n  prop: string\n}\ntype Result = Foo | Bar // { prop?: string | undefined }\ntype Result = Bar | Foo // 该运算符合交换律, 即使调换顺序也会得到 { prop?: string | undefined }\n\n// 不重叠的接口\ninterface Foo {\n  a: string\n}\ninterface Bar {\n  b: number\n}\ntype Result = Foo | Bar\n// | { a: string }\n// | { b: number }\n// | { a: string; b: number }"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "override修饰符"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "自TypeScript 4.3开始, 类的成员新增了override修饰符, 用来表明该成员覆盖了父类的同名成员."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "当添加override修饰符时, TypeScript会检查父类是否存在同名成员."
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "TypeScript提供了一个flag, 可以强制要求那些覆盖父类成员的子类成员使用override修饰符."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "Record与index signature的区别"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "Record的定义:"
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "type Record\u003cK extends keyof any, T\u003e = {\n  [P in K]: T\n}"
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "固定的字段名"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "当K的值是类型时, 它与 index signature 没有区别."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "当K的值是字符串union时, 它与 index signature 不同, 如下:"
                              }
                            ]
                          },
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "type A = Record\u003c'a' | 'b', string\u003e\n// 等价于\ninterface A {\n  a: string\n  b: string\n}"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "equals"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "https://github.com/microsoft/TypeScript/issues/27024"
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "export type Equals\u003cX, Y\u003e =\n  (\u003cT\u003e() =\u003e T extends X ? 1 : 2) extends (\u003cT\u003e() =\u003e T extends Y ? 1 : 2)\n  ? true\n  : false"
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "泛型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "type Box\u003cT\u003e = { value: T }\n\ntype ResultA = Equals\u003cBox\u003cstring\u003e, Box\u003cany\u003e\u003e // false\ntype ResultB = Equals\u003cBox\u003cstring\u003e, Box\u003cunknown\u003e\u003e // false\ntype ResultC = Equals\u003cBox\u003cany\u003e, Box\u003cstring\u003e\u003e // false\ntype ResultD = Equals\u003cBox\u003cunknown\u003e, Box\u003cstring\u003e\u003e // false"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "extends"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "泛型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "type Box\u003cT\u003e = { value: T }\n\ntype ResultA = Box\u003cstring\u003e extends Box\u003cany\u003e ? true : false // true\ntype ResultB = Box\u003cstring\u003e extends Box\u003cunknown\u003e ? true : false // true\ntype ResultC = Box\u003cany\u003e extends Box\u003cstring\u003e ? true : false // true\ntype ResultD = Box\u003cunknown\u003e extends Box\u003cstring\u003e ? true : false // false\ntype ResultE = {} extends Box\u003cstring\u003e ? true : false // false\ntype ResultF = { value: any, other: unknown } extends Box\u003cstring\u003e ? true : false // true\ntype ResultG = { value: unknown, other: unknown } extends Box\u003cstring\u003e ? true : false // false"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "extends的左值"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "// 需要注意的是, 尽管extends最常见的形式是下面这种(形式上符合OOP的extends):\nT extends ...\n// 但extends的左值还可以是一个计算值, 所以下面的语法也是正确的:\n((...args: T) =\u003e any) extends ..."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "通过索引访问成员"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "TypeScript可以直接读取对应索引的值, 甚至可以读取元组的length属性."
                          }
                        ]
                      },
                      {
                        "type": "example",
                        "params": [
                          "typescript"
                        ],
                        "value": "type Tuple = [string, number]\ntype FirstOfTuple = Tuple[0] // string\ntype Length = Tuple['length'] // 2"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "递归类型"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "递归类型需要组合使用几种高级技巧,"
                          },
                          {
                            "type": "newline"
                          },
                          {
                            "type": "text",
                            "value": "其中最关键的部分是创建一个动态的对象类型, 将这个对象类型的索引当作分支条件使用."
                          }
                        ]
                      },
                      {
                        "type": "source",
                        "params": [
                          "typescript"
                        ],
                        "value": "type Head\u003cT extends unknown[]\u003e =\n  T extends [infer U, ...unknown[]]\n  ? U\n  : never\n\ntype Tail\u003cT extends unknown[]\u003e =\n  T extends [unknown, ...infer U]\n  ? U\n  : []\n\ntype HasTail\u003cT extends unknown[]\u003e =\n  T extends [] | [unknown]\n  ? false\n  : true\n\n// 递归类型\ntype Last\u003cT extends unknown[]\u003e = {\n  0: Head\u003cT\u003e\n  1: Last\u003cTail\u003cT\u003e\u003e\n}[HasTail\u003cT\u003e extends true ? 1 : 0]"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "level": 2,
                    "headline": {
                      "type": "headline",
                      "children": [
                        {
                          "type": "text",
                          "value": "类型定义文件"
                        }
                      ],
                      "tags": []
                    },
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "官方文档提供了常见模板: https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "TypeScript里的两种文件类型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "TypeScript里的 "
                              },
                              {
                                "type": "verbatim",
                                "value": ".ts"
                              },
                              {
                                "type": "text",
                                "value": " 文件分为两种:"
                              }
                            ]
                          },
                          {
                            "type": "list",
                            "indent": 0,
                            "ordered": false,
                            "children": [
                              {
                                "type": "listItem",
                                "indent": 0,
                                "checked": null,
                                "term": null,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "模块: 包含顶级 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "import"
                                  },
                                  {
                                    "type": "text",
                                    "value": " / "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "export"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 的 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": ".ts"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 文件"
                                  }
                                ]
                              },
                              {
                                "type": "listItem",
                                "indent": 0,
                                "checked": null,
                                "term": null,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "全局脚本: 不包含顶级 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "import"
                                  },
                                  {
                                    "type": "text",
                                    "value": " / "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "export"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 的 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": ".ts"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 文件"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "全局脚本将自动被项目的其他脚本引用, 无需手动导入即可使用其中的类型."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "模块中的类型需要手动导入."
                              }
                            ]
                          },
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "因此, "
                              },
                              {
                                "type": "verbatim",
                                "value": ".d.ts"
                              },
                              {
                                "type": "text",
                                "value": " 文件仅用于为开发人员注明\"这是一个不包含 "
                              },
                              {
                                "type": "verbatim",
                                "value": "import"
                              },
                              {
                                "type": "text",
                                "value": " / "
                              },
                              {
                                "type": "verbatim",
                                "value": "export"
                              },
                              {
                                "type": "text",
                                "value": " 的全局脚本\","
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "文件后缀本身并不影响功能."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "创建一个符合\"全局脚本\"定义的 "
                              },
                              {
                                "type": "verbatim",
                                "value": ".ts"
                              },
                              {
                                "type": "text",
                                "value": " 文件同样也能为项目添加全局类型和接口."
                              }
                            ]
                          },
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "全局脚本的缺陷"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "list",
                                "indent": 0,
                                "ordered": false,
                                "children": [
                                  {
                                    "type": "listItem",
                                    "indent": 0,
                                    "checked": null,
                                    "term": null,
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "TypeSript对全局脚本的语法约束相当宽松, 这导致即使在写错全局脚本的情况下也能正常通过编译."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "listItem",
                                    "indent": 0,
                                    "checked": null,
                                    "term": null,
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "全局脚本和全局变量类似, 会导致难以追踪类型的来源."
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "bold",
                                    "value": "对于大多数项目, 除非是为了添加模块定义, 否则不应该使用全局脚本."
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "在全局脚本里导入来自其他模块的类型"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "这可以通过import函数实现, 不会破坏全局脚本的属性."
                              }
                            ]
                          },
                          {
                            "type": "source",
                            "params": [
                              "typescript"
                            ],
                            "value": "interface Test {\n  value: import('other-module').Type\n}"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "level": 3,
                        "headline": {
                          "type": "headline",
                          "children": [
                            {
                              "type": "text",
                              "value": "declare"
                            }
                          ],
                          "tags": []
                        },
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "verbatim",
                                "value": "declare"
                              },
                              {
                                "type": "text",
                                "value": " 向环境添加一个已存在的标识符的类型声明."
                              },
                              {
                                "type": "newline"
                              },
                              {
                                "type": "text",
                                "value": "TypeScript项目自动生成的类型文件就是通过 "
                              },
                              {
                                "type": "verbatim",
                                "value": "declare"
                              },
                              {
                                "type": "text",
                                "value": " 声明类型的, 作用类似于C语言的头文件."
                              }
                            ]
                          },
                          {
                            "type": "example",
                            "params": [
                              "typescript"
                            ],
                            "value": "// 声明一个当前环境下已存在的函数签名\ndeclare function foo(): void\n\n// 声明一个当前环境下已存在的常量\ndeclare const BAR: string"
                          },
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "环境模块 Ambient Modules"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "以非侵入的形式为已经存在的模块创建类型声明."
                                  }
                                ]
                              },
                              {
                                "type": "example",
                                "params": [
                                  "typescript"
                                ],
                                "value": "declare module \"my-module\" {\n  ...\n}"
                              },
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "模块名还支持通配符, 以适用于Webpack等打包器."
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "declare namespace"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "verbatim",
                                    "value": "declare namespace"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 适用于声明一个已存在的对象的类型."
                                  },
                                  {
                                    "type": "newline"
                                  },
                                  {
                                    "type": "text",
                                    "value": "尽管声明对象的类型也可以用 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "declare const NAME: Interface"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 完成,"
                                  },
                                  {
                                    "type": "newline"
                                  },
                                  {
                                    "type": "text",
                                    "value": "但namespace胜在其内部是一个与外部无关的作用域,"
                                  },
                                  {
                                    "type": "newline"
                                  },
                                  {
                                    "type": "text",
                                    "value": "因此可以在里面实施内部类型等有助于提升代码可读性的做法."
                                  }
                                ]
                              },
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "verbatim",
                                    "value": "declare namespace"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 最常见的使用场景是用来声明以全局变量形式导入的JavaScript库."
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "section",
                            "level": 4,
                            "headline": {
                              "type": "headline",
                              "children": [
                                {
                                  "type": "text",
                                  "value": "为window声明一个已存在的成员的类型, 但不重新定义window的类型"
                                }
                              ],
                              "tags": []
                            },
                            "children": [
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "可以通过TypeScript的"
                                  },
                                  {
                                    "type": "link",
                                    "protocol": "https",
                                    "url": "https://www.typescriptlang.org/docs/handbook/declaration-merging.html",
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "声明合并"
                                      }
                                    ]
                                  },
                                  {
                                    "type": "text",
                                    "value": "特性实现, "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "Window"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 接口的成员会被并入已存在的 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "Window"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 接口."
                                  }
                                ]
                              },
                              {
                                "type": "paragraph",
                                "children": [
                                  {
                                    "type": "text",
                                    "value": "使用这种做法时, 只有通过 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "window.foo"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 才能找到新添加的成员."
                                  },
                                  {
                                    "type": "newline"
                                  },
                                  {
                                    "type": "text",
                                    "value": "无法通过 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "global.foo"
                                  },
                                  {
                                    "type": "text",
                                    "value": ", "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "globalThis.foo"
                                  },
                                  {
                                    "type": "text",
                                    "value": ", 或直接以标识符访问全局变量的方式 "
                                  },
                                  {
                                    "type": "verbatim",
                                    "value": "foo"
                                  },
                                  {
                                    "type": "text",
                                    "value": " 找到它."
                                  }
                                ]
                              },
                              {
                                "type": "section",
                                "level": 5,
                                "headline": {
                                  "type": "headline",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "模块"
                                    }
                                  ],
                                  "tags": []
                                },
                                "children": [
                                  {
                                    "type": "paragraph",
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "如果文件是一个模块, 声明合并无法扩散到模块之外, 需要使用 "
                                      },
                                      {
                                        "type": "verbatim",
                                        "value": "declare global"
                                      },
                                      {
                                        "type": "text",
                                        "value": "."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "example",
                                    "params": [
                                      "typescript"
                                    ],
                                    "value": "declare global {\n  interface Window {\n    foo: string\n  }\n}"
                                  }
                                ]
                              },
                              {
                                "type": "section",
                                "level": 5,
                                "headline": {
                                  "type": "headline",
                                  "children": [
                                    {
                                      "type": "text",
                                      "value": "全局脚本"
                                    }
                                  ],
                                  "tags": []
                                },
                                "children": [
                                  {
                                    "type": "paragraph",
                                    "children": [
                                      {
                                        "type": "text",
                                        "value": "如果文件是一个全局脚本, 就没有必要使用 "
                                      },
                                      {
                                        "type": "verbatim",
                                        "value": "declare global"
                                      },
                                      {
                                        "type": "text",
                                        "value": ", 直接就能声明合并."
                                      }
                                    ]
                                  },
                                  {
                                    "type": "example",
                                    "params": [
                                      "typescript"
                                    ],
                                    "value": "interface Window {\n  foo: string\n}"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "assetMap": {},
        "codeMap": {
          "type Colors = 'red' | 'green' | 'blue'\ntype RGB = [red: number, green: number, blue: number]\n\n// 变量类型为\n// {\n//   red: number[]\n//   green: string\n//   blue: number[]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n}\n// 不符合 Record\u003cColors, string | RGB\u003e\n\n// 变量类型为\n// {\n//   readonly red: readonly [255, 0, 0]\n//   readonly green: '#00ff00'\n//   readonly blue: readonly [0, 0, 255]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} as const\n// 不符合 Record\u003cColors, string | RGB\u003e, 但由于结果包含readonly修饰符, 不能再修改了\n\n// 变量类型为\n// Record\u003cColors, string | RGB\u003e \nconst paletteA: Record\u003cColors, string | RGB\u003e = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n}\n// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失\n\n// 变量类型为\n// Record\u003cColors, string | RGB\u003e \nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} as Record\u003cColors, string | RGB\u003e\n// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失\n\n// 变量类型为\n// {\n//   red: [number, number, number]\n//   green: string\n//   blue: [number, number, number]\n// }\nconst palette = {\n  red: [255, 0, 0]\n, green: '#00ff00'\n, blue: [0, 0, 255]\n} satisfies Record\u003cColors, string | RGB\u003e\n// 符合 Record\u003cColors, string | RGB\u003e, 且red, green, blue的具体类型得到保留": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Colors"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "RGB"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 变量类型为"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// {"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   red: number[]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   green: string"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   blue: number[]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// }"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "palette"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "#00ff00"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不符合 Record\u003cColors, string | RGB\u003e"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 变量类型为"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// {"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   readonly red: readonly [255, 0, 0]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   readonly green: '#00ff00'"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   readonly blue: readonly [0, 0, 255]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// }"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "palette"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "#00ff00"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "as"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "const"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不符合 Record\u003cColors, string | RGB\u003e, 但由于结果包含readonly修饰符, 不能再修改了"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 变量类型为"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// Record\u003cColors, string | RGB\u003e "
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "paletteA"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Record"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Colors"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "RGB"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "#00ff00"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 变量类型为"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// Record\u003cColors, string | RGB\u003e "
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "palette"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "#00ff00"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "as"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Record"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Colors"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "RGB"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 符合 Record\u003cColors, string | RGB\u003e, 但red, green, blue的具体类型丢失"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 变量类型为"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// {"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   red: [number, number, number]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   green: string"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "//   blue: [number, number, number]"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// }"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "palette"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "red"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "green"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "#00ff00"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "blue"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#A9B8E8",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "255"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " satisfies Record"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#C8D3F5",
                  "text": "Colors"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "string"
                },
                {
                  "color": "#C8D3F5",
                  "text": " | RGB\u003e"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 符合 Record\u003cColors, string | RGB\u003e, 且red, green, blue的具体类型得到保留"
                }
              ]
            ]
          },
          "enum Enum {\n  A = 0\n}\n\nconst val = 0\nconst result = val in Enum // true": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  A "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "val"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " val "
                },
                {
                  "color": "#86E1FC",
                  "text": "in"
                },
                {
                  "color": "#C8D3F5",
                  "text": " Enum "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ]
            ]
          },
          "enum Enum {\n  A = 'a'\n}\n\nconst val = 'a'\nconst result = Object.values(Enum).includes(val) // true": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  A "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "val"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Object"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#65BCFF",
                  "text": "values"
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#C8D3F5",
                  "text": "Enum"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#65BCFF",
                  "text": "includes"
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#C8D3F5",
                  "text": "val"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ]
            ]
          },
          "enum Enum {\n  A\n}\n\nconst a = Enum.A\nconst nameOfA = Enum[a] // 'A'": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  A"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "a"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Enum"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#FF98A4",
                  "text": "A"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "nameOfA"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " Enum"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#C8D3F5",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// 'A'"
                }
              ]
            ]
          },
          "const enum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n \nlet directions = [\n  Direction.Up,\n  Direction.Down,\n  Direction.Left,\n  Direction.Right,\n]\n\n// 编译后\nlet directions = [\n    0 /* Up */,\n    1 /* Down */,\n    2 /* Left */,\n    3 /* Right */,\n]": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "enum"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Direction"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  Up"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  Down"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  Left"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  Right"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": " "
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "let"
                },
                {
                  "color": "#C8D3F5",
                  "text": " directions "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "Direction"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#A9B8E8",
                  "text": "Up"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "Direction"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#A9B8E8",
                  "text": "Down"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "Direction"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#A9B8E8",
                  "text": "Left"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "Direction"
                },
                {
                  "color": "#86E1FC",
                  "text": "."
                },
                {
                  "color": "#A9B8E8",
                  "text": "Right"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 编译后"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "let"
                },
                {
                  "color": "#C8D3F5",
                  "text": " directions "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "    "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "/* Up */"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "    "
                },
                {
                  "color": "#FF966C",
                  "text": "1"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "/* Down */"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "    "
                },
                {
                  "color": "#FF966C",
                  "text": "2"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "/* Left */"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "    "
                },
                {
                  "color": "#FF966C",
                  "text": "3"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "/* Right */"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                }
              ],
              [
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ]
            ]
          },
          "type Getters\u003cType\u003e = {\n  [Property in keyof Type as `get${Capitalize\u003cstring \u0026 Property\u003e}`]: () =\u003e Type[Property]\n}\n\ntype RemoveKindField\u003cType\u003e = {\n  [Property in keyof Type as Exclude\u003cProperty, 'kind'\u003e]: Type[Property]\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Getters"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "in"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "keyof"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "as"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "`"
                },
                {
                  "color": "#C3E88D",
                  "text": "get"
                },
                {
                  "color": "#86E1FC",
                  "text": "${"
                },
                {
                  "color": "#FFC777",
                  "text": "Capitalize"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#C3E88D",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C3E88D",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#86E1FC",
                  "text": "}`"
                },
                {
                  "color": "#86E1FC",
                  "text": "]:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "RemoveKindField"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "in"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "keyof"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "as"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Exclude"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "kind"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e]:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "Property"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "type A = () =\u003e void\ntype B = () =\u003e undefined\n\nconst a: A = () =\u003e true // ok\nconst b: B = () =\u003e true // oops!": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "A"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "void"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "B"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "undefined"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#82AAFF",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "A"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// ok"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#82AAFF",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "B"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// oops!"
                }
              ]
            ]
          },
          "// 类型形式\ntype DescribableFunction = {\n  (someArg: number): boolean\n  description: string\n}\n\n// 接口形式\ninterface DescribableFunction {\n  (someArg: number): boolean\n  description: string\n}": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 类型形式"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "DescribableFunction"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "someArg"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "description"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 接口形式"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "DescribableFunction"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "someArg"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "description"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "// 类型形式\ntype SomeConstructor = {\n  new (someArg: string): SomeObject\n}\n\n// 接口形式\ninterface SomeConstructor {\n  new (someArg: string): SomeObject\n}\n\n// 同时作为一般函数和构造函数\ninterface CallOrConstruct {\n  new (s: string): Date\n  (n?: number): number\n}": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 类型形式"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "SomeConstructor"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "new"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "someArg"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "SomeObject"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 接口形式"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "SomeConstructor"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "new"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "someArg"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "SomeObject"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 同时作为一般函数和构造函数"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "CallOrConstruct"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "new"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "s"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Date"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FCA7EA",
                  "text": "n"
                },
                {
                  "color": "#86E1FC",
                  "text": "?:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "T extends (...args: any) =\u003e any": {
            "typescript": [
              [
                {
                  "color": "#FF98A4",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#65BCFF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                },
                {
                  "color": "#C8D3F5",
                  "text": "args: any"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " any"
                }
              ]
            ]
          },
          "// 不同的类型\ntype Foo = string\ntype Bar = number\ntype Result = Foo \u0026 Bar // never\n\n// 有重叠的union类型\ntype Foo = string | boolean\ntype Bar = number | boolean\ntype Result = Foo \u0026 Bar // boolean\n\n// 有重叠的接口\ninterface Foo {\n  prop: string\n  a: string\n}\ninterface Bar {\n  prop: number\n  b: string\n}\ntype Result = Foo \u0026 Bar // { a: string; b: string; prop: never }\n// 当接口里存在值类型为never的必要字段时, 该接口无法使用, 因此不应该在有重叠的接口上使用\u0026.\n\n// 可选与必需成员重叠的接口\ninterface Foo {\n  prop?: string\n}\ninterface Bar {\n  prop: string\n}\ntype Result = Foo \u0026 Bar // { prop: string }\ntype Result = Bar \u0026 Foo // 该运算符合交换律, 即使调换顺序也会得到 { prop: string }\n\n// 不重叠的接口\ninterface Foo {\n  a: string\n}\ninterface Bar {\n  b: number\n}\ntype Result = Foo \u0026 Bar // { a: string; b: number }": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不同的类型"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// never"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 有重叠的union类型"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// boolean"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 有重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// { a: string; b: string; prop: never }"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 当接口里存在值类型为never的必要字段时, 该接口无法使用, 因此不应该在有重叠的接口上使用\u0026."
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 可选与必需成员重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": "?:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// { prop: string }"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// 该运算符合交换律, 即使调换顺序也会得到 { prop: string }"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\u0026"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// { a: string; b: number }"
                }
              ]
            ]
          },
          "// 不同的类型\ntype Foo = string\ntype Bar = number\ntype Result = Foo | Bar // string | number\n\n// 有重叠的union类型\ntype Foo = string | boolean\ntype Bar = number | boolean\ntype Result = Foo | Bar // string | number | boolean\n\n// 有重叠的接口\ninterface Foo {\n  prop: string\n  a: string\n}\ninterface Bar {\n  prop: number\n  b: number\n}\ntype Result = Foo | Bar\n// | { prop: string; a: string }\n// | { prop: number; b: number }\n// | { prop: string | number; a: string; b: number }\n\n// 可选与必需成员重叠的接口\ninterface Foo {\n  prop?: string\n}\ninterface Bar {\n  prop: string\n}\ntype Result = Foo | Bar // { prop?: string | undefined }\ntype Result = Bar | Foo // 该运算符合交换律, 即使调换顺序也会得到 { prop?: string | undefined }\n\n// 不重叠的接口\ninterface Foo {\n  a: string\n}\ninterface Bar {\n  b: number\n}\ntype Result = Foo | Bar\n// | { a: string }\n// | { b: number }\n// | { a: string; b: number }": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不同的类型"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// string | number"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 有重叠的union类型"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "boolean"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// string | number | boolean"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 有重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { prop: string; a: string }"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { prop: number; b: number }"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { prop: string | number; a: string; b: number }"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 可选与必需成员重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": "?:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "prop"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// { prop?: string | undefined }"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// 该运算符合交换律, 即使调换顺序也会得到 { prop?: string | undefined }"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 不重叠的接口"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Result"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Foo"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Bar"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { a: string }"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { b: number }"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// | { a: string; b: number }"
                }
              ]
            ]
          },
          "type Record\u003cK extends keyof any, T\u003e = {\n  [P in K]: T\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Record"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "K"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "keyof"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "P"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "in"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "K"
                },
                {
                  "color": "#86E1FC",
                  "text": "]:"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "type A = Record\u003c'a' | 'b', string\u003e\n// 等价于\ninterface A {\n  a: string\n  b: string\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "A"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Record"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 等价于"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "A"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "a"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "b"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "export type Equals\u003cX, Y\u003e =\n  (\u003cT\u003e() =\u003e T extends X ? 1 : 2) extends (\u003cT\u003e() =\u003e T extends Y ? 1 : 2)\n  ? true\n  : false": {
            "typescript": [
              [
                {
                  "color": "#86E1FC",
                  "text": "export"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Equals"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "X"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Y"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "X"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "1"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "2"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Y"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "1"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "2"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                }
              ]
            ]
          },
          "type Box\u003cT\u003e = { value: T }\n\ntype ResultA = Equals\u003cBox\u003cstring\u003e, Box\u003cany\u003e\u003e // false\ntype ResultB = Equals\u003cBox\u003cstring\u003e, Box\u003cunknown\u003e\u003e // false\ntype ResultC = Equals\u003cBox\u003cany\u003e, Box\u003cstring\u003e\u003e // false\ntype ResultD = Equals\u003cBox\u003cunknown\u003e, Box\u003cstring\u003e\u003e // false": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "value"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultA"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Equals"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e,"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultB"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Equals"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e,"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultC"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Equals"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e,"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultD"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Equals"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e,"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ]
            ]
          },
          "type Box\u003cT\u003e = { value: T }\n\ntype ResultA = Box\u003cstring\u003e extends Box\u003cany\u003e ? true : false // true\ntype ResultB = Box\u003cstring\u003e extends Box\u003cunknown\u003e ? true : false // true\ntype ResultC = Box\u003cany\u003e extends Box\u003cstring\u003e ? true : false // true\ntype ResultD = Box\u003cunknown\u003e extends Box\u003cstring\u003e ? true : false // false\ntype ResultE = {} extends Box\u003cstring\u003e ? true : false // false\ntype ResultF = { value: any, other: unknown } extends Box\u003cstring\u003e ? true : false // true\ntype ResultG = { value: unknown, other: unknown } extends Box\u003cstring\u003e ? true : false // false": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "value"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultA"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultB"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultC"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultD"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultE"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultF"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "value"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "any"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "other"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// true"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "ResultG"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "value"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#4FD6BE",
                  "text": "other"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Box"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// false"
                }
              ]
            ]
          },
          "// 需要注意的是, 尽管extends最常见的形式是下面这种(形式上符合OOP的extends):\nT extends ...\n// 但extends的左值还可以是一个计算值, 所以下面的语法也是正确的:\n((...args: T) =\u003e any) extends ...": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 需要注意的是, 尽管extends最常见的形式是下面这种(形式上符合OOP的extends):"
                }
              ],
              [
                {
                  "color": "#FF98A4",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " extends "
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                }
              ],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 但extends的左值还可以是一个计算值, 所以下面的语法也是正确的:"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "(("
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                },
                {
                  "color": "#FCA7EA",
                  "text": "args"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "=\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " any"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": " extends "
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                }
              ]
            ]
          },
          "type Tuple = [string, number]\ntype FirstOfTuple = Tuple[0] // string\ntype Length = Tuple['length'] // 2": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Tuple"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "number"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "FirstOfTuple"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Tuple"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// string"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Length"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Tuple"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "length"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#7A88CF",
                  "text": "// 2"
                }
              ]
            ]
          },
          "type Head\u003cT extends unknown[]\u003e =\n  T extends [infer U, ...unknown[]]\n  ? U\n  : never\n\ntype Tail\u003cT extends unknown[]\u003e =\n  T extends [unknown, ...infer U]\n  ? U\n  : []\n\ntype HasTail\u003cT extends unknown[]\u003e =\n  T extends [] | [unknown]\n  ? false\n  : true\n\n// 递归类型\ntype Last\u003cT extends unknown[]\u003e = {\n  0: Head\u003cT\u003e\n  1: Last\u003cTail\u003cT\u003e\u003e\n}[HasTail\u003cT\u003e extends true ? 1 : 0]": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Head"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "[]\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "[infer"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "U"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "[]]"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "U"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "never"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Tail"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "[]\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": ","
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                },
                {
                  "color": "#86E1FC",
                  "text": "infer"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "U"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "U"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "[]"
                }
              ],
              [],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "HasTail"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "[]\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "[]"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "|"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "false"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 递归类型"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "type"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Last"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "unknown"
                },
                {
                  "color": "#86E1FC",
                  "text": "[]\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "="
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Head"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#FF966C",
                  "text": "1"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Last"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "Tail"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e\u003e"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                },
                {
                  "color": "#86E1FC",
                  "text": "["
                },
                {
                  "color": "#FFC777",
                  "text": "HasTail"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003c"
                },
                {
                  "color": "#FFC777",
                  "text": "T"
                },
                {
                  "color": "#86E1FC",
                  "text": "\u003e"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "extends"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "true"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "?"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "1"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "0"
                },
                {
                  "color": "#86E1FC",
                  "text": "]"
                }
              ]
            ]
          },
          "interface Test {\n  value: import('other-module').Type\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Test"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "value"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "import"
                },
                {
                  "color": "#B4C2F0",
                  "text": "("
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#C3E88D",
                  "text": "other-module"
                },
                {
                  "color": "#86E1FC",
                  "text": "'"
                },
                {
                  "color": "#B4C2F0",
                  "text": ")"
                },
                {
                  "color": "#C8D3F5",
                  "text": "."
                },
                {
                  "color": "#FFC777",
                  "text": "Type"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "// 声明一个当前环境下已存在的函数签名\ndeclare function foo(): void\n\n// 声明一个当前环境下已存在的常量\ndeclare const BAR: string": {
            "typescript": [
              [
                {
                  "color": "#7A88CF",
                  "text": "// 声明一个当前环境下已存在的函数签名"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "declare"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "function"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#82AAFF",
                  "text": "foo"
                },
                {
                  "color": "#B4C2F0",
                  "text": "()"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "void"
                }
              ],
              [],
              [
                {
                  "color": "#7A88CF",
                  "text": "// 声明一个当前环境下已存在的常量"
                }
              ],
              [
                {
                  "color": "#C099FF",
                  "text": "declare"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "const"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF98A4",
                  "text": "BAR"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ]
            ]
          },
          "declare module \"my-module\" {\n  ...\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "declare"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#C099FF",
                  "text": "module"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#86E1FC",
                  "text": "\""
                },
                {
                  "color": "#C3E88D",
                  "text": "my-module"
                },
                {
                  "color": "#86E1FC",
                  "text": "\""
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "  "
                },
                {
                  "color": "#FF757F",
                  "text": "..."
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "declare global {\n  interface Window {\n    foo: string\n  }\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "declare"
                },
                {
                  "color": "#C8D3F5",
                  "text": " global "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "  "
                },
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#B4C2F0",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Window"
                },
                {
                  "color": "#B4C2F0",
                  "text": " {"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "    "
                },
                {
                  "color": "#4FD6BE",
                  "text": "foo"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#B4C2F0",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "  }"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          },
          "interface Window {\n  foo: string\n}": {
            "typescript": [
              [
                {
                  "color": "#C099FF",
                  "text": "interface"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FFC777",
                  "text": "Window"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#B4C2F0",
                  "text": "{"
                }
              ],
              [
                {
                  "color": "#C8D3F5",
                  "text": "  "
                },
                {
                  "color": "#4FD6BE",
                  "text": "foo"
                },
                {
                  "color": "#86E1FC",
                  "text": ":"
                },
                {
                  "color": "#C8D3F5",
                  "text": " "
                },
                {
                  "color": "#FF966C",
                  "text": "string"
                }
              ],
              [
                {
                  "color": "#B4C2F0",
                  "text": "}"
                }
              ]
            ]
          }
        }
      },
      "fonts": [
        {
          "family": "Fira Code",
          "local": [
            "Fira Code",
            "FiraCode-Regular"
          ],
          "weight": [
            400
          ],
          "woff": "https://static.blackglory.me/files/fonts/FiraCode-Regular.ttf?format=woff\u0026subset=%0A+%21%22%23%24%26%27%28%29*%2C-.%2F012359%3A%3B%3C%3D%3E%3FABCDEFGHIKLMNOPRSTUWXY%5B%5D%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%E4%B8%80%E4%B8%8A%E4%B8%8B%E4%B8%8D%E4%B8%8E%E4%B8%94%E4%B8%A2%E4%B8%AA%E4%B8%BA%E4%B9%9F%E4%BA%86%E4%BA%8E%E4%BA%A4%E4%BB%A5%E4%BB%B7%E4%BC%9A%E4%BD%86%E4%BD%93%E4%BD%9C%E4%BD%BF%E4%BF%9D%E4%BF%AE%E5%80%BC%E5%85%B7%E5%86%8D%E5%87%BD%E5%88%B0%E5%89%8D%E5%8C%85%E5%8D%B3%E5%8F%98%E5%8F%A0%E5%8F%A3%E5%8F%AF%E5%90%88%E5%90%8C%E5%90%8D%E5%90%8E%E5%90%AB%E5%91%98%E5%92%8C%E5%9B%A0%E5%9C%A8%E5%9E%8B%E5%A2%83%E5%A3%B0%E5%A4%B1%E5%AD%97%E5%AD%98%E5%B0%BD%E5%B7%A6%E5%B7%B2%E5%B8%B8%E5%BA%8F%E5%BA%94%E5%BC%8F%E5%BD%92%E5%BD%93%E5%BD%A2%E5%BE%8B%E5%BE%97%E5%BF%85%E6%84%8F%E6%88%90%E6%89%80%E6%8D%A2%E6%8E%A5%E6%94%B9%E6%95%B0%E6%97%A0%E6%97%B6%E6%98%8E%E6%98%AF%E6%9C%80%E6%9C%89%E6%9E%84%E6%9E%9C%E6%AD%A3%E6%AD%A4%E6%AE%B5%E6%B3%95%E6%B3%A8%E7%8E%AF%E7%94%A8%E7%94%B1%E7%95%99%E7%9A%84%E7%A1%AE%E7%A7%8D%E7%AC%A6%E7%AD%89%E7%AD%BE%E7%AE%97%E7%AE%A1%E7%B1%BB%E7%BB%93%E7%BC%96%E8%83%BD%E8%88%AC%E8%A6%81%E8%A7%81%E8%AE%A1%E8%AF%91%E8%AF%A5%E8%AF%AD%E8%B0%83%E8%BF%90%E8%BF%98%E8%BF%99%E9%80%89%E9%80%92%E9%80%A0%E9%87%8C%E9%87%8D%E9%87%8F%E9%9C%80%E9%9D%A2%E9%A1%BA%E9%A5%B0\u0026signature=e8bff10b456fc50d57f487ed5496e36542323c2f3e8f2e2d8b9266cdd966c323",
          "woff2": "https://static.blackglory.me/files/fonts/FiraCode-Regular.ttf?format=woff2\u0026subset=%0A+%21%22%23%24%26%27%28%29*%2C-.%2F012359%3A%3B%3C%3D%3E%3FABCDEFGHIKLMNOPRSTUWXY%5B%5D%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%E4%B8%80%E4%B8%8A%E4%B8%8B%E4%B8%8D%E4%B8%8E%E4%B8%94%E4%B8%A2%E4%B8%AA%E4%B8%BA%E4%B9%9F%E4%BA%86%E4%BA%8E%E4%BA%A4%E4%BB%A5%E4%BB%B7%E4%BC%9A%E4%BD%86%E4%BD%93%E4%BD%9C%E4%BD%BF%E4%BF%9D%E4%BF%AE%E5%80%BC%E5%85%B7%E5%86%8D%E5%87%BD%E5%88%B0%E5%89%8D%E5%8C%85%E5%8D%B3%E5%8F%98%E5%8F%A0%E5%8F%A3%E5%8F%AF%E5%90%88%E5%90%8C%E5%90%8D%E5%90%8E%E5%90%AB%E5%91%98%E5%92%8C%E5%9B%A0%E5%9C%A8%E5%9E%8B%E5%A2%83%E5%A3%B0%E5%A4%B1%E5%AD%97%E5%AD%98%E5%B0%BD%E5%B7%A6%E5%B7%B2%E5%B8%B8%E5%BA%8F%E5%BA%94%E5%BC%8F%E5%BD%92%E5%BD%93%E5%BD%A2%E5%BE%8B%E5%BE%97%E5%BF%85%E6%84%8F%E6%88%90%E6%89%80%E6%8D%A2%E6%8E%A5%E6%94%B9%E6%95%B0%E6%97%A0%E6%97%B6%E6%98%8E%E6%98%AF%E6%9C%80%E6%9C%89%E6%9E%84%E6%9E%9C%E6%AD%A3%E6%AD%A4%E6%AE%B5%E6%B3%95%E6%B3%A8%E7%8E%AF%E7%94%A8%E7%94%B1%E7%95%99%E7%9A%84%E7%A1%AE%E7%A7%8D%E7%AC%A6%E7%AD%89%E7%AD%BE%E7%AE%97%E7%AE%A1%E7%B1%BB%E7%BB%93%E7%BC%96%E8%83%BD%E8%88%AC%E8%A6%81%E8%A7%81%E8%AE%A1%E8%AF%91%E8%AF%A5%E8%AF%AD%E8%B0%83%E8%BF%90%E8%BF%98%E8%BF%99%E9%80%89%E9%80%92%E9%80%A0%E9%87%8C%E9%87%8D%E9%87%8F%E9%9C%80%E9%9D%A2%E9%A1%BA%E9%A5%B0\u0026signature=8b9ca61f85257744c8ae9d1e00e36bec5c627b393f81cecc48ed411ef6ce641f"
        },
        {
          "family": "Source Han Serif SC",
          "local": [
            "Source Han Serif SC",
            "思源宋体",
            "Noto Serif CJK SC",
            "Noto Serif SC"
          ],
          "weight": [
            400
          ],
          "woff": "https://static.blackglory.me/files/fonts/SourceHanSerifSC-Regular.otf?format=woff\u0026subset=+-0123BGSTacdeghiklnoprsty%C2%A9\u0026signature=52203c34faa30fdfabf1220d38138d225843e8fcab55b643cab4093e64b4df32",
          "woff2": "https://static.blackglory.me/files/fonts/SourceHanSerifSC-Regular.otf?format=woff2\u0026subset=+-0123BGSTacdeghiklnoprsty%C2%A9\u0026signature=8fc65bb879a26d361e53ab34b1790e3760f3f12f558aedfd9b7738cc26783eb3"
        },
        {
          "family": "Source Han Serif SC",
          "local": [
            "Source Han Serif SC",
            "思源宋体",
            "Noto Serif CJK SC",
            "Noto Serif SC"
          ],
          "weight": [
            700
          ],
          "woff": "https://static.blackglory.me/files/fonts/SourceHanSerifSC-Bold.otf?format=woff\u0026subset=+%26%28%29%2C.49%3C%3EAIMORSTUabcdefgijklmnopqrstuvwxy%7B%7C%7D%E4%B8%80%E4%B8%8D%E4%B8%8E%E4%B8%A4%E4%B8%AA%E4%B8%B2%E4%B8%BA%E4%B8%BE%E4%B9%89%E4%B9%8F%E4%BA%A4%E4%BB%8E%E4%BB%96%E4%BB%B6%E4%BD%86%E4%BD%9C%E4%BF%AE%E5%80%BC%E5%85%A5%E5%85%A8%E5%85%B6%E5%87%BD%E5%88%AB%E5%8C%BA%E5%8F%82%E5%8F%96%E5%8F%A3%E5%8F%AF%E5%90%8D%E5%90%A6%E5%91%98%E5%93%81%E5%9B%9E%E5%9B%BA%E5%9C%A8%E5%9D%97%E5%9E%8B%E5%A2%83%E5%A3%B0%E5%A4%84%E5%AD%97%E5%AD%98%E5%AE%9A%E5%AE%9E%E5%AF%B9%E5%AF%BC%E5%B0%86%E5%B1%80%E5%B7%A6%E5%B7%B2%E5%B8%B8%E5%B9%B6%E5%BA%93%E5%BC%95%E5%BC%B1%E5%BD%92%E5%BE%97%E6%80%A7%E6%88%90%E6%8E%A5%E6%94%B9%E6%95%B0%E6%96%87%E6%96%B0%E6%97%A0%E6%98%8E%E6%98%AF%E6%9C%AC%E6%9D%9F%E6%9D%A5%E6%9E%84%E6%9E%9A%E6%9F%A5%E6%A3%80%E6%A8%A1%E6%AD%A3%E6%AE%B5%E6%AF%94%E6%B1%82%E6%B3%95%E6%B3%9B%E6%B5%8B%E7%8E%AF%E7%8E%B0%E7%90%86%E7%94%9F%E7%9A%84%E7%9C%8B%E7%A1%AE%E7%A4%BE%E7%A7%8D%E7%AC%A6%E7%AD%BE%E7%AE%97%E7%B1%BB%E7%B4%A2%E7%BA%A6%E7%BC%BA%E8%84%9A%E8%87%AA%E8%8E%B7%E8%A1%8D%E8%AE%BF%E8%AF%BB%E8%B7%B3%E8%BF%87%E8%BF%90%E8%BF%94%E9%80%92%E9%80%9A%E9%80%A0%E9%87%8C%E9%87%8D%E9%87%8F%E9%94%AE%E9%97%AE%E9%98%B6%E9%99%B7%E9%9B%86%E9%A5%B0%E9%AB%98\u0026signature=928571b6c4b4152f2546d2ffb74c7ef51e8a4f1d0aa4bd059a0dc82e5176a584",
          "woff2": "https://static.blackglory.me/files/fonts/SourceHanSerifSC-Bold.otf?format=woff2\u0026subset=+%26%28%29%2C.49%3C%3EAIMORSTUabcdefgijklmnopqrstuvwxy%7B%7C%7D%E4%B8%80%E4%B8%8D%E4%B8%8E%E4%B8%A4%E4%B8%AA%E4%B8%B2%E4%B8%BA%E4%B8%BE%E4%B9%89%E4%B9%8F%E4%BA%A4%E4%BB%8E%E4%BB%96%E4%BB%B6%E4%BD%86%E4%BD%9C%E4%BF%AE%E5%80%BC%E5%85%A5%E5%85%A8%E5%85%B6%E5%87%BD%E5%88%AB%E5%8C%BA%E5%8F%82%E5%8F%96%E5%8F%A3%E5%8F%AF%E5%90%8D%E5%90%A6%E5%91%98%E5%93%81%E5%9B%9E%E5%9B%BA%E5%9C%A8%E5%9D%97%E5%9E%8B%E5%A2%83%E5%A3%B0%E5%A4%84%E5%AD%97%E5%AD%98%E5%AE%9A%E5%AE%9E%E5%AF%B9%E5%AF%BC%E5%B0%86%E5%B1%80%E5%B7%A6%E5%B7%B2%E5%B8%B8%E5%B9%B6%E5%BA%93%E5%BC%95%E5%BC%B1%E5%BD%92%E5%BE%97%E6%80%A7%E6%88%90%E6%8E%A5%E6%94%B9%E6%95%B0%E6%96%87%E6%96%B0%E6%97%A0%E6%98%8E%E6%98%AF%E6%9C%AC%E6%9D%9F%E6%9D%A5%E6%9E%84%E6%9E%9A%E6%9F%A5%E6%A3%80%E6%A8%A1%E6%AD%A3%E6%AE%B5%E6%AF%94%E6%B1%82%E6%B3%95%E6%B3%9B%E6%B5%8B%E7%8E%AF%E7%8E%B0%E7%90%86%E7%94%9F%E7%9A%84%E7%9C%8B%E7%A1%AE%E7%A4%BE%E7%A7%8D%E7%AC%A6%E7%AD%BE%E7%AE%97%E7%B1%BB%E7%B4%A2%E7%BA%A6%E7%BC%BA%E8%84%9A%E8%87%AA%E8%8E%B7%E8%A1%8D%E8%AE%BF%E8%AF%BB%E8%B7%B3%E8%BF%87%E8%BF%90%E8%BF%94%E9%80%92%E9%80%9A%E9%80%A0%E9%87%8C%E9%87%8D%E9%87%8F%E9%94%AE%E9%97%AE%E9%98%B6%E9%99%B7%E9%9B%86%E9%A5%B0%E9%AB%98\u0026signature=9355267fe747264972b0d8024017e09a9b0a78c3234e92e657c28cb71ea0240a"
        }
      ],
      "publicEnv": {
        "googleAnalyticsTrackingId": "G-WFL1010ZGH"
      }
    },
    "__N_SSG": true
  },
  "page": "/notes/[slug]",
  "query": {
    "slug": "typescript"
  },
  "buildId": "vjhrQN9hg7RFymnqmty8G",
  "isFallback": false,
  "gsp": true,
  "scriptLoader": []
}